name: Release

on:
  push:
    tags:
      - '*'

jobs:
  createRelease:
    runs-on: ubuntu-latest
    steps:
      - name: Get the tag
        id: get_tag
        run: |
          echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\//}  
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.TAG }}
          release_name: Release ${{ steps.get_tag.outputs.TAG }}
          draft: false
          prerelease: false
      - name: Create variable files
        run: |
          cat <<< ${{ steps.create_release.outputs.upload_url }} > releaseurl.txt
          cat <<< ${{ steps.get_tag.outputs.TAG }} > tag.txt
      - name: Upload variables
        uses: actions/upload-artifact@v2
        with:
          name: vars
          path: ./*.txt

  build:
    needs: [createRelease]
    strategy:
      matrix:
        include:
          - descrip: linux-amd64
            os: ubuntu-latest
            envflags: CGO_ENABLED=1 GOOS=linux GOARCH=amd64
            goflags: -ldflags '-linkmode external -extldflags "-static" -s -w'            
          - descrip: linux-arm64
            os: ubuntu-latest
            chain: gcc-aarch64-linux-gnu
            envflags: CC=aarch64-linux-gnu-gcc CGO_ENABLED=1 GOOS=linux GOARCH=arm64
            goflags: -ldflags '-linkmode external -extldflags "-static" -s -w'
          - descrip: linux-armv7
            os: ubuntu-latest
            chain: gcc-arm-linux-gnueabihf
            envflags: CC=arm-linux-gnueabihf-gcc CGO_ENABLED=1 GOOS=linux GOARCH=arm GOARM=7
            goflags: -ldflags '-linkmode external -extldflags "-static" -s -w'           
          - descrip: win-amd64
            os: ubuntu-latest
            envflags: CC=x86_64-w64-mingw32-gcc CGO_ENABLED=1 GOOS=windows GOARCH=amd64
            goflags: -ldflags '-linkmode external -extldflags "-static" -s -w'
            chain: gcc-mingw-w64-x86-64
            ext: .exe
          - descrip: osx-amd64
            os: macos-latest

    runs-on: ${{ matrix.os }}
    steps:
      - name: Install cross compile chain
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install ${{matrix.chain}}
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.x
      - name: Check out code
        uses: actions/checkout@v2
      - name: Get vars
        uses: actions/download-artifact@v1
        with:
          name: vars
      - shell: bash
        id: var      
        run: |
          echo ::set-output name=TAG::`cat vars/tag.txt`
          echo ::set-output name=RELEASEURL::`cat vars/releaseurl.txt`
      - name: Build
        run: |
          go generate ./...
          ${{ matrix.envflags }} go build -o shiori-${{ steps.var.outputs.TAG }}-${{ matrix.descrip }}${{ matrix.ext }} -a ${{ matrix.goflags }} .
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: shiori-*
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.var.outputs.RELEASEURL }}
          asset_path: ./shiori-${{ steps.var.outputs.TAG }}-${{ matrix.descrip }}${{ matrix.ext }}
          asset_name: shiori-${{ steps.var.outputs.TAG }}-${{ matrix.descrip }}${{ matrix.ext }}
          asset_content_type: application/octet-stream

  docker:
    needs: [createRelease]
    runs-on: ubuntu-latest
    steps:
      - name: Get vars
        uses: actions/download-artifact@v1
        with:
          name: vars
      - shell: bash
        id: var        
        run: |
          echo ::set-output name=TAG::`cat vars/tag.txt`
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get the tag
        id: get_tag
        run: echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\//}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push docker
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: true
          tags: |
            nrew225/shiori:latest
            nrew225/shiori:${{ steps.var.outputs.TAG }}
